#!/usr/bin/env coffee

fs = require("fs")
path = require("path")
markdown = require("markdown").markdown
stylus = require("stylus")
console.log('   using stylus %s', stylus.version)
coffeescript = require("coffee-script")
console.log('   using coffeescript %s', coffeescript.VERSION)
finder = require("findit").find(process.cwd() + "/bloqs")

output_files = {}
global_stylus = []
global_markdown = []
rcount = 0
wcount = 0

relative = (infilename) ->
    return 'docs' + infilename.split(process.cwd() + '/bloqs')[1] if infilename[0] is '/'
    infilename

outfilename = (infilename, ext) ->
    relativepath = relative(infilename)
    base = relativepath.split(path.extname(relativepath))[0]
    switch ext
        when '.css'
            outpath = 'public/css/mystyles/' + base + ext
        when '.js'
            outpath = 'public/js/mylibs/' + base + ext
        when '.sjs' # marker for server-side javascript
            outpath = 'server/' + base + '.sjs'
        when '.sjstest' # marker for server-side tests
            outpath = 'test/server/' + base + '.js'
        when '.jstest' # marker for client-side tests
            outpath = 'test/client/' + base + '.js'
        when '.html' # build/ already appended
            outpath = base + ext
        else
            outpath = "build/" + base + ext
    outpath

ensurepath = (relpath) ->
  parts = relpath.split("/")
  parts.pop()
  buildpath = ""
  while parts.length
    buildpath = path.join(buildpath, parts.shift())
    fs.mkdirSync buildpath, "0755"  unless path.existsSync(buildpath)
    
toHTMLTree = (filename) ->
  try
    rcount++
    text = fs.readFileSync filename, "utf-8"
    tree = markdown.toHTMLTree(text)
    html = markdown.toHTML(text)
    walk tree, codeExcerpt
    outpath = outfilename(filename, ".html")
    ensurepath outpath
    writeIfChanged(outpath, html)
  catch e
    console.log "There was a problem processing file %s", filename
    throw e

writeIfChanged = (outpath, text) ->
    wcount++
    fs.writeFileSync(outpath, text)


writefiles = ->
  concatenated_js = []
  concatenated_css = []
  ## First Pass: Convert all higher-level languages, save as reference files
  for output_path, outtext of output_files
    ext = path.extname(output_path)
    outpath = outfilename(output_path, ext)
    contents = output_files[output_path].join("\n\n")
    if ext is '.stylus'
        contents = global_stylus.join('\n\n') + '\n\n' + contents
    if ext is '.markdown'
        contents = global_markdown.join('\n\n') + '\n\n' + contents
    if ext in [ ".stylus", ".coffee", ".md", ".markdown", ".mustache", ".json", ".sketch" ]
      fs.writeFile outpath, contents
      processor[ext[1..]] outpath, contents
  ## Second Pass: Write out all stashed fragments to files
  for output_path, outtext of output_files
    ext = path.extname(output_path)
    outpath = outfilename(output_path, ext)
    contents = output_files[output_path].join("\n\n")
    if ext in [ ".html", ".css", ".js" ]
      # console.log('writing file %s', outpath)
      writeIfChanged(outpath, processor[ext[1..]](outpath, contents))
      if ext is '.js'
        concatenated_js.push(contents)
      if ext is '.css'
        concatenated_css.push(contents)
    if ext is '.sjs'
        writeIfChanged(outpath.replace('sjs', 'js'), processor[ext[1..]](outpath, contents))
    if ext in ['.sjstest', '.jstest']
        writeIfChanged(outpath.replace(/s?jstest/, 'js'), processor[ext[1..]](outpath, contents))
        
  ## Concatenate all client CSS and JS into one file for delivery
  writeIfChanged('public/js/script.js', concatenated_js.join('\n\n'))
  writeIfChanged('public/css/style.css', concatenated_css.join('\n\n'))
  console.log('oextract read %s files and wrote %s files', rcount, wcount)

ttype = (obj) ->
  t = typeof obj
  t = "array"  if Array.isArray(obj)
  t

walk = (tree, fn) ->
  switch ttype(tree)
    when "object"
      for key of tree
        fn key, tree[key]
        walk tree[key], fn
    when "array"
      if tree.length == 2
        fn tree[0], tree[1]
        walk tree[1], fn
      else
        tree.forEach (subtree) ->
          walk subtree, fn
    else

stash_fragment = (filename, fragment, processed) ->
  fragment = fragment.split("\n")[2..].join("\n")  unless processed
  if filename is 'globals.stylus'
    global_stylus.push fragment
  else if filename is 'globals.markdown'
    global_markdown.push fragment
  else
    output_files[filename] = []  unless output_files[filename]
    output_files[filename].push fragment

codeExcerpt = (name, text) ->
  if /.*code.*/.test(name)
    lines = text.trim().split("\n")
    parsedline = lines[0].match(/file\: +(.*)/)
    unless parsedline
      throw new Error("no filename found for " + lines.length + " lines of code")
    filenames = parsedline[1]
    # Allow multiple, comma-separated output files per code block:
    for filename in filenames.split(',')
      filename = filename.trim()
      ext = path.extname(filename)
      base = path.basename(filename, ext)
      outpath = base + ext
      stash_fragment outpath, text

extract = (filename) ->
  ext = path.extname(filename)
  toHTMLTree filename  if ext in [ ".md", ".markdown" ]
  

processor = 
  sketch: (filename, contents) ->
  
  stylus: (filename, contents) ->
    ext = path.extname(filename)
    base = path.basename(filename, ext)
    outpath = base + '.css'
    outcontents = ''
    stylus(contents).set("filename", filename).render (err, result) ->
      if err
        console.log('Error parsing stylus %s: %s', filename, err)
        return
      outcontents = result
      stash_fragment outpath, outcontents, true
  
  mustache: (filename, contents) ->
  
  coffee: (filename, contents) ->
    ext = path.extname(filename)
    base = path.basename(filename, ext)
    outpath = base + '.js'
    outcontents = coffeescript.compile(contents)
    stash_fragment outpath, outcontents, true
  
  markdown: (filename, contents) ->
    outpath = outfilename(filename, ".html")
    outcontents = markdown.toHTML(contents)
    stash_fragment outpath, outcontents, true
  
  md: (filename, contents) ->
    processors.markdown filename, contents
  
  json: (filename, contents) ->
  
  html: (filename, contents) ->
    contents
  
  css: (filename, contents) ->
    contents
  
  js: (filename, contents) ->
    contents
    
  sjs: (filename, contents) ->
    contents

  sjstest: (filename, contents) ->
    contents

  jstest: (filename, contents) ->
    contents

finder.on "file", extract
finder.on "end",  writefiles


